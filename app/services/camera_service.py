import cv2
import threading
from app.models.camera_model import CameraModel
from app.services.report_service import get_trucks_with_cameras

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä
active_cameras = []

class CameraThread:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ –∫–∞–º–µ—Ä."""
    def __init__(self, camera_index):
        self.camera_index = camera_index
        self.current_frame = None
        self.lock = threading.Lock()
        self.running = True
        self.thread = threading.Thread(target=self._capture_frames, daemon=True)
        self.thread.start()

    def _capture_frames(self):
        cap = cv2.VideoCapture(f'udpsrc port={self.camera_index} \
                           caps="application/x-rtp, media=(string)video, \
                           clock-rate=(int)90000, encoding-name=(string)H264, \
                           payload=(int)96" ! rtph264depay ! \
                           decodebin ! videoconvert ! appsink', cv2.CAP_GSTREAMER)
        if not cap.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É {self.camera_index}")
            self.running = False
            return

        while self.running:
            success, frame = cap.read()
            if success:
                with self.lock:
                    self.current_frame = frame
        cap.release()

    def get_frame(self):
        with self.lock:
            return self.current_frame

    def stop(self):
        self.running = False
        self.thread.join()

def start_cameras_from_reports():
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ reports."""
    global active_cameras
    stop_all_cameras()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤—ã—Ö

    trucks_with_cameras = get_trucks_with_cameras()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for truck in trucks_with_cameras:
        name, state_number, front, back, left, right = truck
        print(f"üöõ –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä –¥–ª—è {name} ({state_number})")

        active_cameras.append(CameraThread(front))  # –ü–µ—Ä–µ–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
        active_cameras.append(CameraThread(back))   # –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
        active_cameras.append(CameraThread(left))   # –õ–µ–≤–∞—è –∫–∞–º–µ—Ä–∞
        active_cameras.append(CameraThread(right))  # –ü—Ä–∞–≤–∞—è –∫–∞–º–µ—Ä–∞

    return {"message": "–í—Å–µ –∫–∞–º–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã", "count": len(active_cameras)}

def stop_all_cameras():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–µ—Ä—ã."""
    global active_cameras
    for cam in active_cameras:
        cam.stop()
    active_cameras = []
    print("üõë –í—Å–µ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def get_camera_frames():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–∞–¥—Ä—ã —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä."""
    return [cam.get_frame() for cam in active_cameras]
