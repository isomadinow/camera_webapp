import cv2
import threading
import time
from app.models.camera_model import CameraModel
from app.models.truck_model import TruckModel
from app.services.report_service import get_trucks_with_cameras

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä
active_cameras = {}

class CameraThread:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ –∫–∞–º–µ—Ä."""
    def __init__(self, camera_index, camera_type):
        self.camera_index = camera_index
        self.camera_type = camera_type
        self.current_frame = None
        self.lock = threading.Lock()
        self.running = True
        self.recording = False
        self.recording_thread = None
        self.video_writer = None
        self.thread = threading.Thread(target=self._capture_frames, daemon=True)
        self.thread.start()

    def _capture_frames(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ."""
        print(f"üì° –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É {self.camera_type} (–ø–æ—Ä—Ç {self.camera_index})...")
        cap = cv2.VideoCapture(
            f'udpsrc port={self.camera_index} '
            f'caps="application/x-rtp, media=(string)video, '
            f'clock-rate=(int)90000, encoding-name=(string)H264, '
            f'payload=(int)96" ! rtph264depay ! '
            f'decodebin ! videoconvert ! appsink',
            cv2.CAP_GSTREAMER
        )

        if not cap.isOpened():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ {self.camera_type} (–ø–æ—Ä—Ç {self.camera_index}) –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å!")
            self.running = False
            return

        print(f"‚úÖ –ö–∞–º–µ—Ä–∞ {self.camera_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!")

        while self.running:
            success, frame = cap.read()
            if success:
                with self.lock:
                    self.current_frame = frame
                if self.recording and self.video_writer:
                    self.video_writer.write(frame)
        cap.release()

    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –∫–∞–º–µ—Ä—ã."""
        with self.lock:
            return self.current_frame

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –∫–∞–º–µ—Ä—ã."""
        self.running = False
        self.thread.join()
        self.stop_recording()

    def start_recording(self, output_path, duration_seconds=60):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã."""
        if self.recording:
            print(f"‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ {self.camera_type} —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ.")
            return

        self.recording = True
        self.recording_thread = threading.Thread(
            target=self._record_video, 
            args=(output_path, duration_seconds),
            daemon=True
        )
        self.recording_thread.start()

    def _record_video(self, output_path, duration_seconds):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ."""
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        fps = 20.0
        frame_size = (640, 480)

        self.video_writer = cv2.VideoWriter(output_path, fourcc, fps, frame_size)

        print(f"üé• –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã {self.camera_type} –Ω–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥...")

        start_time = time.time()
        while self.recording and (time.time() - start_time) < duration_seconds:
            time.sleep(0.05)

        self.stop_recording()

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ."""
        if self.recording:
            self.recording = False
            if self.video_writer:
                self.video_writer.release()
                self.video_writer = None
            print(f"üõë –ó–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã {self.camera_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


def start_cameras_for_truck(truck_number):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–µ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞."""
    global active_cameras

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤—ã—Ö
    stop_all_cameras()

    # –ò—â–µ–º –≥—Ä—É–∑–æ–≤–∏–∫ –≤ –±–∞–∑–µ
    truck = TruckModel.get_by_state_number(truck_number)
    if not truck:
        return {"error": "–ì—Ä—É–∑–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–µ—Ä—ã –∏–∑ reports
    truck_data = get_trucks_with_cameras()
    cameras = next((t for t in truck_data if t[1] == int(truck_number)), None)

    if not cameras or len(cameras) < 6:
        return {"error": "–ö–∞–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"}

    _, _, front, back, left, right = cameras

    print(f"üöõ –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä –¥–ª—è {truck.Name} ({truck.StateNumber})")

    # –ó–∞–ø—É—Å–∫–∞–µ–º 4 –∫–∞–º–µ—Ä—ã
    active_cameras = {
        "front": CameraThread(front, "Front"),
        "back": CameraThread(back, "Back"),
        "left": CameraThread(left, "Left"),
        "right": CameraThread(right, "Right"),
    }

    return {"message": f"–ö–∞–º–µ—Ä—ã –¥–ª—è {truck_number} –∑–∞–ø—É—â–µ–Ω—ã"}

def stop_all_cameras():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–µ—Ä—ã."""
    global active_cameras
    for cam in active_cameras.values():
        cam.stop()
    active_cameras.clear()
    print("üõë –í—Å–µ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def get_camera_frames():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–∞–¥—Ä—ã —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä."""
    return {cam_type: cam.get_frame() for cam_type, cam in active_cameras.items()}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
# active_cameras['front'].start_recording('output_front.avi', duration_seconds=120)
